// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Uncomment the next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum GradeLevel {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
}

model User {
  id               String                @id @default(cuid())
  name             String
  cpf              String                @unique
  role             Role
  password         String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  studies          Study[]
  teaches          Teaches[]
  notices          Notice[]
  noticeRecipients NoticeRecipientUser[]
}

model Class {
  id                   String                 @id @default(cuid())
  name                 String
  code                 String                 @unique
  gradeLevel           GradeLevel
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  studies              Study[]
  teaches              Teaches[]
  NoticeRecipientClass NoticeRecipientClass[]
}

model Study {
  studentId String
  classId   String
  user      User     @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId])
}

model Teaches {
  teacherId String
  classId   String
  user      User     @relation(fields: [teacherId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, classId])
}

model Notice {
  id                   String                 @id @default(cuid())
  title                String
  content              String
  senderId             String
  user                 User                   @relation(fields: [senderId], references: [id])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  noticeRecipients     NoticeRecipientUser[]
  NoticeRecipientClass NoticeRecipientClass[]
}

model NoticeRecipientUser {
  userId    String
  noticeId  String
  user      User?     @relation(fields: [userId], references: [id])
  notice    Notice?  @relation(fields: [noticeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, noticeId])
}

model NoticeRecipientClass {
  classId   String
  noticeId  String
  class     Class?    @relation(fields: [classId], references: [id])
  notice    Notice?   @relation(fields: [noticeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, noticeId])
}
