// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id        String     @id @default(cuid())
  avatarUrl String?
  name      String
  cpf       String     @unique
  role      Role
  password  String
  salt      String
  schedule  Schedule[]

  studies          Study[]
  teaches          Teaches[]
  notices          Notice[]
  noticeRecipients NoticeRecipientUser[]
  teacheSubjects   TeacheSubject[]
  grades           Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradeLevel {
  id    String @id @default(cuid())
  name  String
  value Float

  classes Class[]
}

model Class {
  id   String @id @default(cuid())
  name String
  code String @unique

  schedule     Schedule[]
  gradeLevelId String
  gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id])

  studies                Study[]
  teaches                Teaches[]
  noticeRecipientClasses NoticeRecipientClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Study {
  studentId String
  user      User   @relation(fields: [studentId], references: [id])

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId])
}

model Teaches {
  teacherId String
  user      User   @relation(fields: [teacherId], references: [id])

  classId String
  class   Class  @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, classId])
}

model Notice {
  id      String @id @default(cuid())
  title   String
  content String

  senderId String
  user     User   @relation(fields: [senderId], references: [id])

  noticeRecipients       NoticeRecipientUser[]
  noticeRecipientClasses NoticeRecipientClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NoticeRecipientUser {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  noticeId String
  notice   Notice @relation(fields: [noticeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, noticeId])
}

model NoticeRecipientClass {
  classId String
  class   Class  @relation(fields: [classId], references: [id])

  noticeId String
  notice   Notice @relation(fields: [noticeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, noticeId])
}

model Subject {
  id   String @id @default(cuid())
  name String
  code String @unique

  schedule       Schedule[]
  teacheSubjects TeacheSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeacheSubject {
  teacherId String
  user      User   @relation(fields: [teacherId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, subjectId])
}

model Concept {
  id    String @id @default(cuid())
  name  String
  value Float

  grades Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id String @id @default(cuid())

  conceptId String
  concept   Concept @relation(fields: [conceptId], references: [id])

  studentId String
  student   User   @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id String @id @default(cuid())

  dayOfWeek DayOfWeek
  startTime DateTime
  endTime   DateTime
  room      String?

  Class     Class   @relation(fields: [classId], references: [id])
  classId   String
  User      User    @relation(fields: [userId], references: [id])
  userId    String
  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
